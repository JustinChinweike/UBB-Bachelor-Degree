1. 
EN: Give a regular expression that matches any odd number of words, each word having an odd number of letters.

Answer: 
^(\b[a-zA-Z]{1,3}\b(\s\b[a-zA-Z]{1,3}\b){0,2})+$



2. 
EN: Give four commands that display the number of empty lines in a file.

Answer: 
grep -c '^$' filename
awk 'NF == 0 {count++} END {print count}' filename
sed -n '/^$/p' filename | wc -l
perl -lne 'END {print $count} /^$/ && $count++' filename


3. 
EN: Write a SED command that displays a file's lines deleting the first, the third, the fifth, the seventh, etc space on those lines

Answer:

sed ':a; s/^\(\([^ ]* [^ ]* \)*[^ ]*\) \([^ ]*\)/\1\3/; ta' filename



4. 
EN: Write an AWK command that displays the product of the last field of lines on odd positions having an odd number of fields.

Answer:
awk 'BEGIN { product = 1 } NR % 2 == 1 && NF % 2 == 1 { product *= $NF } END { print product }' filename



5. 
EN: Give four ways of redirecting the standard output of a process.

Answer: 

command > output.txt
command >> output.txt
command > /dev/null
command > output.txt 2> error.txt



6. 
EN: Write three UNIX Shell conditions that check the existence of a file.



7. 
EN: Draw the hierarchy of processes created by the code below, including the parent process.

    for(i=0; i<3; i++) {
        if(execlp("ls", "ls", "/", NULL) != -1) {
            fork();
        }
    }


Answer:
P0 (Parent Process)
P1 -> ls /
P2 -> ls /
P3 -> ls /



8. 
EN: Add the necessary code so that the instruction below does not get stuck waiting for standard input.

    execlp("cat", NULL);

Answer: 

#include <unistd.h>
#include <stdio.h>

int main() {
    execlp("cat", "cat", "/dev/null", NULL);
    perror("execlp"); // Print an error message if execlp fails
    return 1; // Return an error status
}



9.
EN: Sketch an implementation of the popen and pclose functions, only for the case when the command output should be read in the C code.



10. 
EN: How many FIFOs can a process open for reading if the FIFOs are and will ever be used by other processes only for reading?


Answer:
It depends. The special behavior of FIFO is that it waits for the fifo to be opened for the complementary action. If each one of the other processes opens exactly one fifo, then we can open as many as we want. Otherwise, if we are not careful, it might lead to deadlock. Suppose we have fifos 1 and 2. Let A be a process that opens the fifos in the order 1 2. If the other process opens the FIFOs in order 2 and 1, we have a deadlock, so we can't move forward. 




11. 
EN: When would you prefer using a FIFO instead of a pipe?

Answer:
FIFOs are preferred when you need persistent communication channels between unrelated processes, 
bidirectional communication, multi-process coordination, or integration with filesystem features 
and access controls. They provide more flexibility and durability compared to anonymous pipes, 
which are typically used for simpler, short-lived communication between related processes.


12. 
EN: What is a "critical section"?

Answer: 

A critical section is a part of the program that accesses shared resources and modifies them in such a fashion 
that the modifications are not performed in atomic operations. For this section, the shared resources must be 
protected to avoid concurrent access. This protected section can not be entered by more than one process at a time




13. 
EN: When would you prefer using a mutex instead of a rwlock?

I would prefer using a mutex instead of a rwlock when the critical section requires exclusive 
access by one thread at a time. Mutexes are designed for mutual exclusion, ensuring that only 
one thread can hold the lock and access the shared resource.

Example: When modifying shared data structures that cannot be concurrently accessed or
modified by multiple threads simultaneously.



14. 
EN: What will be the effect of replacing calls to pthread_mutex_lock with calls to sem_wait?





15.
EN: What does pthread_cond_wait do with the mutex it gets as an argument?

Answer: 
pthread_cond_wait releases the mutex passed as an argument before suspending the thread and waiting on the condition variable.
This behavior ensures that the thread does not hold the mutex while waiting, allowing other threads to acquire the mutex and access shared resources if needed. Upon waking from pthread_cond_wait, the thread reacquires the mutex to continue executing, maintaining proper synchronization and exclusive access where necessary.



16. 
EN: Sketch a solution for the producer-consumer problem.



17. 
EN: What can you do as a software developer to prevent deadlocks?

Answer:
A method for preventing deadlocks is establishing a locking order, and always respecting it, for avoiding cycles. 



18. 
EN: What state transition will a process undergo when it calls pthread_cond_wait? Justify your answer.



19. 
EN: What is the content of file of type directory in the Linux file system?

Answer: 
In the Linux file system, a file of type directory contains metadata that describes the directory
itself and lists the names and inode numbers of the files and subdirectories it contains. 


20. 
EN: Explain the difference between a symbolic link and a hard link.

Answe:
The difference between a symbolic link and a hard link is that Hard link points directly to an inode while symbolic link
points to a file that points to an inode. Another difference is that hard link is not allowed for a directory but it's 
allowed for a symbolic link (soft link). 







