
1.
EN: Give three regular expressions that match any non-negative number multiple of 5.

Answer: 
^[0-9]*[05]$
^0|[1-9][0-9]*[05]$
^(0|[1-9][0-9]*[05])$


2.
EN: Give five GREP commands that display all the lines in a file that contain the letter "a" uppercase or lowercase.

Answer: 
grep -i 'a' filename
grep '[aA]' filename
grep -E 'a|A' filename
grep -P '(?i)a' filename
egrep 'a|A' filename



3.
EN: Write two SED commands that display from a file only the lines that do not contain digit 7.

Answer:
sed -n '/7/!p' filename
sed '/7/d' filename



4.
EN: Write an AWK command that displays the sum of the next to last field of all lines.

Answer:
awk '{ sum += $(NF-1) } END { print sum }' filename



5.
EN: How can you redirect on the command line the standard error through pipe to another program?

Answer:

command 2>&1 | other_program

'command' is the original command whose error you want to redirect
2>&1 redirects stderr (file descriptor 2) to stdout (file descriptor 1).




6.
EN: Write a UNIX Shell script that displays all command line arguments without using FOR

Answer: 

#!/bin/bash

# While there are arguments left to process
while [ "$#" -gt 0 ]; do
    echo "$1"    # Print the current argument
    shift        # Shift all arguments to the left
done




7.
EN: Draw the hierarchy of processes created by the code below, including the parent process.

    for(i=0; i<3; i++) {
        fork();
        execlp("ls", "ls", "/", NULL);
    }


Answer:
   P
 / | \
c1 C2 C3




8.
EN: Add the necessary code so that file b.txt is overwritten with the content of file a.txt from the instruction below.

    execlp("cat", "cat", "a.txt", NULL);


Answer:
execlp("sh", "sh", "-c", "cat a.txt > b.txt", NULL);



9.
EN: Why is it not advisable to communicate bidirectionally through a single FIFO?

Answer: 
Because trying to use the same FIFO for bidirectional communication can lead to blocking,
potential deadlocks,data collision and simply becuase implementing proper synchronization
mechanisms to handle bidirectional communication in a single FIFO adds significant complexity to the code.





10.
EN: How many FIFOs can a process open if they are not and will not ever be used by any other process?

Answer:
A process can open as many FIFOs (named pipes) as its operating system allows. However,
the number of FIFOs a process can open is typically limited by system resources, such as file descriptors and memory.


11.
EN: When would you prefer using a process instead of a thread?

Answer:
When developing a web application that requires both a web server and a database server.
Each service needs to be robust and isolated to ensure that a failure in one does not affect the other.
The web server and database server run in separate processes. If the web server crashes, t
he database server continues to run unaffected.



12.
EN: What is a "critical section"?

Answer:
A critical section is a part of the program that accesses shared resources and modifies them in such a fashion that the modifications are not performed in atomic operations. For this section, the shared resources must be protected to avoid concurrent access. This protected section can not be entered by more than one process at a time



13.
EN: Why should the thread recheck the condition after returning from the pthread_cond_wait call?

Answer: 

Rechecking the condition after returning from pthread_cond_wait is crucial because:

Spurious wakeups can cause the thread to wake up without the condition being met.
Lost wakeup signals can result in the thread missing a condition change.

By using a loop to recheck the condition, the thread ensures correct behavior and synchronization, 
preventing potential errors and ensuring that it only proceeds when the condition is truly met.




14.
EN: What will be the effect of replacing calls to pthread_mutex_lock with calls to pthread_rwlock_rdlock?

Answer:

Replacing pthread_mutex_lock with pthread_rwlock_rdlock allows multiple threads to read concurrently,
increasing read performance,but writing operations may be indefinitely blocked if read locks are continuously held. 
Managing synchronization becomes more complex to ensure data consistency between read and write operations.



15.
EN: What is the effect of calling pthread_barrier_wait on a barrier initialized with 1?

Answer: 
When a thread calls pthread_barrier_wait on a barrier initialized with a count of 1, 
it will immediately cross the barrier without waiting, as it is the only thread needed 
to reach the barrier for it to be considered complete.



16.
EN: How can you increment the value of a POSIX semaphore?

Answer: 

sem_post()



17.
EN: What can you do as a software developer to prevent deadlocks?

Answer: 

Lock Ordering: Acquire multiple locks in a predefined order to avoid circular waits.
Justification: Ensures a consistent lock acquisition sequence, preventing circular wait conditions.




18.
EN: What state transition will a process undergo when reading from a file?

Answer:

Running -> Blocked (waiting for I/O completion)
Blocked -> Ready (I/O operation completes)
Ready -> Running (process is scheduled to run again)


19.
EN: What is the content of the superblock on a Linux disk?

Answer:

The superblock on a Linux disk contains critical filesystem metadata
Filesystem type,size,state.
Block size.
magic number that is unique and identifies the filesystem type
Free Blocks Count:  Number of free blocks available.
Free Inodes Count: Number of free inodes available.




20.
EN: Can you create a hard link towards a file on a different partition? Justify your answer.

Answer: 

No, you cannot create a hard link to a file on a different partition because hard links must 
reside within the same filesystem, as they reference inodes that are unique and local to that specific filesystem.



21. (Bounus) 
EN: Enumerate the data block adressing types of an i-node.


Answer: 

Direct Addressing: Pointers directly to data blocks.
Single Indirect Addressing: Pointer to an indirect block that points to data blocks.
Double Indirect Addressing: Pointer to a block of pointers to indirect blocks, which in turn point to data blocks.
Triple Indirect Addressing: Pointer to a block of pointers to double indirect blocks, which in turn point to single indirect blocks, which in turn point to data blocks.








